int ecall_dispatcher::MatrixOperation(uint8_t* ectxt, size_t ectxt_len, uint8_t** octxt, size_t* octxt_len)
{
    auto start= chrono::steady_clock::now();
    stringstream css;

    // TRACE_ENCLAVE("Enclave: Receiving Ctxt start!");
    string etemp = string(ectxt, ectxt + ectxt_len);
    css << etemp;
    vector<long> cmsg1;
    // int*** HostMatrix = new int**[2];
    int HostMatrix[2][MatrixDim][MatrixDim];
    for (int k = 0; k < 2; k++)
    {
        // initialize matrix using int*** format
        HostMatrix[k] = new int*[MatrixDim];
        for (int l = 0; l < MatrixDim; l++)
        {
            HostMatrix[k][l] = new int[MatrixDim];
        }

        // read two ctxts from string buffer
        cmsg1.clear();
        Ctxt ctemp(*activePubKey);
        ctemp.Ctxt::read(css);
        e_context->getEA().decrypt(ctemp, *activeSecKey, cmsg1);

        // assign the values in matrix
        int idx = 0;
        for(int i = 0; i < MatrixDim; ++i){
            for(int j = 0; j < MatrixDim; ++j){
                HostMatrix[k][i][j] = cmsg1[idx];
                idx++;
            }
        }
    }

    // HostMatrix[0] for inverse
    int** inverse_result = new int[MatrixDim];
    for (int l = 0; l < MatrixDim; l++)
    {
        inverse_result[l] = new int[MatrixDim];
    }

    // multiply the inverse by HostMatrix[1]
    int** final_result = new int[MatrixDim];
    for (int l = 0; l < MatrixDim; l++)
    {
        final_result[l] = new int[MatrixDim];
    }

    // send enclaveCtxt to server
    // TRACE_ENCLAVE("Enclave: Transforming Ctxt start!");
    vector<long> cmsg2(MatrixDim * MatrixDim);
    for(int i = 0; i < MatrixDim; ++i){
        for(int j = 0; j < MatrixDim; ++j){
            cmsg2[i * MatrixDim + j] = final_result[i][j];
        }
    }
    Ctxt ctemp(*activePubKey);
    e_context->getEA().encrypt(ctemp, *activePubKey, cmsg2);

    css.str(std::string());
    css.clear();
    ctemp.writeTo(css);
    string otemp = css.str();
    uint8_t* host_buf = (uint8_t*) oe_host_malloc(size_t(otemp.size() + 1));
    memcpy(host_buf, (uint8_t*)otemp.c_str(), otemp.size() + 1);
    *octxt = host_buf;
    *octxt_len = otemp.size();

    auto end = std::chrono::steady_clock::now();
    auto diff = end - start;
    double timeElapsed = chrono::duration <double, milli> (diff).count()/1000.0;
    cout << "------------------------------------------------------------------------" << endl;
    cout << "Enclave: Matrix Inverse Runtime inside enclave = " << timeElapsed << " s" << endl;
    cout << "------------------------------------------------------------------------" << endl;

    return 0;
}